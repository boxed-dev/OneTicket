// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String    @id @unique
  email        String
  firstName    String
  lastName     String
  profileImage String
  customerId   String?   @unique
  phone_number String?
  registered_date DateTime @default(now())
  tickets      Ticket[]  // Add this line
  createdAt    DateTime  @default(now())

  Site         Site[]
  posts        Post[]
  Subscription Subscription?
}

model Ticket {
  ticket_id   Int          @id @default(autoincrement())
  user        User         @relation(fields: [userId], references: [id]) // Change this line
  userId      String       // Change this line
  event       EventAndShow @relation(fields: [event_id], references: [event_id])
  event_id    Int
  ticket_type TicketType
  ticket_date DateTime     @default(now())
  visit_date  DateTime
  quantity    Int
}

model EventAndShow {
  event_id    Int       @id @default(autoincrement())
  event_name  String
  description String?
  event_type  EventType
  start_date  DateTime
  end_date    DateTime
  location    String
  price       Float
  capacity    Int
  tickets     Ticket[] // Relation with Ticket
}

enum TicketType {
  GeneralEntry
  Exhibition
  Show
}

enum EventType {
  Exhibition
  Show
}


model Site {
  id           String   @id @default(uuid())
  name         String
  description  String
  subdirectory String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  imageUrl String?
  User     User?   @relation(fields: [userId], references: [id])
  userId   String?
  posts    Post[]
}

model Post {
  id String @id @default(uuid())

  title            String
  articleContent   Json
  smallDescription String
  image            String
  slug             String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  Site      Site?    @relation(fields: [siteId], references: [id], onDelete: Cascade)
  siteId    String?
}

model Subscription {
  stripeSubscriptionId String   @id @unique
  interval             String
  status               String
  planId               String
  currentPeriodStart   Int
  currentPeriodEnd     Int
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  User   User?   @relation(fields: [userId], references: [id])
  userId String? @unique
}